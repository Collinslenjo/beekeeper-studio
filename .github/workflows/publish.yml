name: Build & Publish

on: 
  push:
    tags:
      - "v*"

jobs:

  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-18.04, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          snapcraft_token: ${{ secrets.snapcraft_token }}
      - name: Remove dist directory
        if: matrix.os != 'windows-latest'
        run: rm -rf ./dist_electron
      - name: Remove dist directory windows
        if: matrix.os == 'windows-latest'
        run: Remove-Item dist_electron -Recurse -ErrorAction Ignore
      - name: Prepare for app notarization
        if: startsWith(matrix.os, 'macos')
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.apple_key }}' > ~/private_keys/AuthKey_${{ secrets.apple_key_id }}.p8

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}
          skip_build: true
          use_vue_cli: true
          max_attempts: 2

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: true
          windows_certs: ${{ secrets.windows_cert }}
          windows_certs_password: ${{ secrets.windows_cert_password }}
          mac_certs: ${{ secrets.mac_dev }}
          mac_certs_password: ${{ secrets.mac_dev_pw }}
        env:
          API_KEY_ID: ${{ secrets.apple_key_id }}
          API_KEY_ISSUER_ID: ${{ secrets.apple_issuer_id }}
          BT_TOKEN: "${{secrets.bintray_apikey}}"
      - name: Cleanup artifacts
        if: matrix.os != 'windows-latest'
        run: |
          npx rimraf "dist_electron/!(*.exe|*.deb|*.rpm|*.AppImage|*.dmg|*.snap)"
      - name: Cleanup artifacts Win
        if: matrix.os == 'windows-latest'
        run: |
          npx rimraf "dist_electron/!(*.exe)"
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os }}
          path: dist_electron